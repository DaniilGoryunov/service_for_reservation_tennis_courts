import streamlit as st
from services.in_table import *
from services.reserv import *
from services.redis_service import (
    get_cached_user_reservations,
    cache_user_reservations,
    redis_client,
    deserialize_from_json
)
import json

def show_user_cache_debug(user_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        key = f"reservations:user:{user_id}"
        value = redis_client.get(key)
        ttl = redis_client.ttl(key)
        
        if value:
            try:
                reservations = deserialize_from_json(value)
                st.write(f"üîç –ö—ç—à —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (TTL: {ttl} —Å–µ–∫.):")
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π –≤ –∫—ç—à–µ: {len(reservations)}")
                for i, res in enumerate(reservations, 1):
                    st.code(f"–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è #{i}:\n{json.dumps(res, indent=2, ensure_ascii=False, default=str)}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫—ç—à–∞: {str(e)}")
        else:
            st.info("–í –∫—ç—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_page(user_id):
    reservations = get_user_reservations(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    display_reservations(reservations, role="user")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ
    show_user_cache_debug(user_id)

# –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def manage_users():
    st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    user_to_change = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏")
    
    if user_to_change:
        if not check_user_exists(user_to_change):
            return 

    new_role = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å", ["user", "coach"], key="role_select")

    salary_8_12, salary_12_18, salary_18_22 = get_salary_inputs(new_role)

    if st.button("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        if new_role == "coach":
            if check_coach_exists(user_to_change):
                return

            coach_added = add_user_as_coach(user_to_change, salary_8_12, salary_12_18, salary_18_22)
            if coach_added:
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_change} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º.")
            else:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_change}.")
        elif new_role == "user":
            if change_coach_role_to_user(user_to_change):
                st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_change} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_change}.")

def get_user_role(user_id):
    query = "SELECT role FROM users WHERE user_id = %s;"
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cur:
                cur.execute(query, (user_id,))
                result = cur.fetchone()
                if result:
                    return result[0]  
                else:
                    return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    
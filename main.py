import streamlit as st
import asyncio
import redis
import json
from services.redis_service import (
    get_user_session, get_user_id_from_token, 
    get_cached_user_data, get_cached_user_role,
    redis_client
)
from services.auth import get_user_id

r = redis.Redis(
    host='localhost',
    port=6379,
    db=0,
    decode_responses=True 
)

def test_redis_connection():
    try:
        r.ping()
        st.success("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        r.set("test_key", "Hello from Tennis App!")
        value = r.get("test_key")
        st.write(f"–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis: {value}")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")

async def restore_session():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis"""
    if 'token' in st.session_state:
        user_id = get_user_id_from_token(st.session_state.token)
        if user_id:
            session_data = get_user_session(user_id)
            if session_data:
                st.session_state.user = session_data['username']
                st.session_state.user_id = user_id
                return True
    return False

async def check_user_session():
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ Redis
    if 'token' in st.session_state:
        if await restore_session():
            return True, st.session_state.user
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if 'user' in st.session_state and 'user_id' in st.session_state:
        return True, st.session_state.user
    return False, None

def show_redis_debug_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö –≤ Redis"""
    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é Redis"):
        st.subheader("–î–∞–Ω–Ω—ã–µ –≤ Redis:")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
        all_keys = redis_client.keys("*")
        
        if not all_keys:
            st.info("–í Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ —Ç–∏–ø–∞–º
        auth_keys = [k for k in all_keys if k.startswith("auth:")]
        session_keys = [k for k in all_keys if k.startswith("session:")]
        user_keys = [k for k in all_keys if k.startswith("user:")]
        reservation_keys = [k for k in all_keys if k.startswith("reservations:")]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if auth_keys:
            st.write("üîë –¢–æ–∫–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
            for key in auth_keys:
                value = redis_client.get(key)
                ttl = redis_client.ttl(key)
                st.code(f"–ö–ª—é—á: {key}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}\nTTL: {ttl} —Å–µ–∫.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
        if session_keys:
            st.write("üë§ –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for key in session_keys:
                value = redis_client.get(key)
                ttl = redis_client.ttl(key)
                try:
                    session_data = json.loads(value)
                    st.code(f"–ö–ª—é—á: {key}\n–î–∞–Ω–Ω—ã–µ: {json.dumps(session_data, indent=2, ensure_ascii=False)}\nTTL: {ttl} —Å–µ–∫.")
                except:
                    st.code(f"–ö–ª—é—á: {key}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}\nTTL: {ttl} —Å–µ–∫.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if user_keys:
            st.write("üë• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for key in user_keys:
                value = redis_client.get(key)
                ttl = redis_client.ttl(key)
                try:
                    user_data = json.loads(value)
                    st.code(f"–ö–ª—é—á: {key}\n–î–∞–Ω–Ω—ã–µ: {json.dumps(user_data, indent=2, ensure_ascii=False)}\nTTL: {ttl} —Å–µ–∫.")
                except:
                    st.code(f"–ö–ª—é—á: {key}\n–ó–Ω–∞—á–µ–Ω–∏–µ: {value}\nTTL: {ttl} —Å–µ–∫.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
        if reservation_keys:
            st.write("üéæ –†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∫–æ—Ä—Ç–æ–≤:")
            for key in reservation_keys:
                value = redis_client.get(key)
                ttl = redis_client.ttl(key)
                try:
                    reservations = json.loads(value)
                    st.code(f"–ö–ª—é—á: {key}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π: {len(reservations)}\nTTL: {ttl} —Å–µ–∫.")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏
                    for i, res in enumerate(reservations, 1):
                        st.code(f"–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è #{i}:\n{json.dumps(res, indent=2, ensure_ascii=False, default=str)}")
                except Exception as e:
                    st.code(f"–ö–ª—é—á: {key}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}\nTTL: {ttl} —Å–µ–∫.")

async def main():
    st.title("–†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤")
    test_redis_connection()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    is_authenticated, user = await check_user_session()
    if is_authenticated:
        st.success(f"–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        show_redis_debug_info()
    else:
        st.error("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É registration")
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
        if 'token' in st.session_state:
            del st.session_state.token
        if 'user' in st.session_state:
            del st.session_state.user
        if 'user_id' in st.session_state:
            del st.session_state.user_id

    if 'show_image' not in st.session_state:
        st.session_state.show_image = False

    if st.button("–°—é—Ä–ø—Ä–∏–∑"):
        st.session_state.show_image = not st.session_state.show_image

    if st.session_state.show_image:
        st.image("images/–º–æ—è_–±–æ–ª—å.png", width=500)

if __name__ == "__main__":
    asyncio.run(main())
